//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18052
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PureSeeder.Core.Configuration
{
    
    
    /// <summary>
    /// The PureConfigSection Configuration Section.
    /// </summary>
    public partial class PureConfigSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the PureConfigSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PureConfigSectionSectionName = "PureConfig";
        
        /// <summary>
        /// Gets the PureConfigSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::PureSeeder.Core.Configuration.PureConfigSection Instance
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.PureConfigSection)(global::System.Configuration.ConfigurationManager.GetSection(global::PureSeeder.Core.Configuration.PureConfigSection.PureConfigSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.PureConfigSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::PureSeeder.Core.Configuration.PureConfigSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Servers Property
        /// <summary>
        /// The XML name of the <see cref="Servers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServersPropertyName = "servers";
        
        /// <summary>
        /// Gets or sets the Servers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Servers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.PureConfigSection.ServersPropertyName, IsRequired=true, IsKey=false, IsDefaultCollection=false)]
        public virtual global::PureSeeder.Core.Configuration.ServerSettingsCollection Servers
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.ServerSettingsCollection)(base[global::PureSeeder.Core.Configuration.PureConfigSection.ServersPropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.PureConfigSection.ServersPropertyName] = value;
            }
        }
        #endregion
        
        #region Settings Property
        /// <summary>
        /// The XML name of the <see cref="Settings"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingsPropertyName = "settings";
        
        /// <summary>
        /// Gets or sets the Settings.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Settings.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.PureConfigSection.SettingsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::PureSeeder.Core.Configuration.AppSettingsCollection Settings
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.AppSettingsCollection)(base[global::PureSeeder.Core.Configuration.PureConfigSection.SettingsPropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.PureConfigSection.SettingsPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PureSeeder.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of Server instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PureSeeder.Core.Configuration.Server), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::PureSeeder.Core.Configuration.ServerSettingsCollection.ServerPropertyName)]
    public partial class ServerSettingsCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PureSeeder.Core.Configuration.Server"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerPropertyName = "server";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::PureSeeder.Core.Configuration.ServerSettingsCollection.ServerPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PureSeeder.Core.Configuration.ServerSettingsCollection.ServerPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PureSeeder.Core.Configuration.Server)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PureSeeder.Core.Configuration.Server"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PureSeeder.Core.Configuration.Server"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PureSeeder.Core.Configuration.Server();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Server"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PureSeeder.Core.Configuration.Server"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Server this[int index]
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.Server)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Server"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PureSeeder.Core.Configuration.Server"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Server this[object name]
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.Server)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PureSeeder.Core.Configuration.Server"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="server">The <see cref="global::PureSeeder.Core.Configuration.Server"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::PureSeeder.Core.Configuration.Server server)
        {
            base.BaseAdd(server);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PureSeeder.Core.Configuration.Server"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="server">The <see cref="global::PureSeeder.Core.Configuration.Server"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::PureSeeder.Core.Configuration.Server server)
        {
            base.BaseRemove(this.GetElementKey(server));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Server"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PureSeeder.Core.Configuration.Server"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Server GetItemAt(int index)
        {
            return ((global::PureSeeder.Core.Configuration.Server)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Server"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PureSeeder.Core.Configuration.Server"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Server GetItemByKey(string name)
        {
            return ((global::PureSeeder.Core.Configuration.Server)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace PureSeeder.Core.Configuration
{
    
    
    /// <summary>
    /// A server to seed on
    /// </summary>
    public partial class Server : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Server.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::PureSeeder.Core.Configuration.Server.NamePropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Server.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Address Property
        /// <summary>
        /// The XML name of the <see cref="Address"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AddressPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Address.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Server.AddressPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Address
        {
            get
            {
                return ((string)(base[global::PureSeeder.Core.Configuration.Server.AddressPropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Server.AddressPropertyName] = value;
            }
        }
        #endregion
        
        #region MinPlayers Property
        /// <summary>
        /// The XML name of the <see cref="MinPlayers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MinPlayersPropertyName = "minPlayers";
        
        /// <summary>
        /// Gets or sets the MinPlayers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MinPlayers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Server.MinPlayersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int MinPlayers
        {
            get
            {
                return ((int)(base[global::PureSeeder.Core.Configuration.Server.MinPlayersPropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Server.MinPlayersPropertyName] = value;
            }
        }
        #endregion
        
        #region MaxPlayers Property
        /// <summary>
        /// The XML name of the <see cref="MaxPlayers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MaxPlayersPropertyName = "maxPlayers";
        
        /// <summary>
        /// Gets or sets the MaxPlayers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxPlayers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Server.MaxPlayersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int MaxPlayers
        {
            get
            {
                return ((int)(base[global::PureSeeder.Core.Configuration.Server.MaxPlayersPropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Server.MaxPlayersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace PureSeeder.Core.Configuration
{
    
    
    /// <summary>
    /// A collection of Setting instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::PureSeeder.Core.Configuration.Setting), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMap, AddItemName=global::PureSeeder.Core.Configuration.AppSettingsCollection.SettingPropertyName)]
    public partial class AppSettingsCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::PureSeeder.Core.Configuration.Setting"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SettingPropertyName = "add";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMap;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::PureSeeder.Core.Configuration.AppSettingsCollection.SettingPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::PureSeeder.Core.Configuration.AppSettingsCollection.SettingPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::PureSeeder.Core.Configuration.Setting)(element)).Name;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::PureSeeder.Core.Configuration.Setting"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::PureSeeder.Core.Configuration.Setting"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::PureSeeder.Core.Configuration.Setting();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Setting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PureSeeder.Core.Configuration.Setting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Setting this[int index]
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.Setting)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Setting"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PureSeeder.Core.Configuration.Setting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Setting this[object name]
        {
            get
            {
                return ((global::PureSeeder.Core.Configuration.Setting)(base.BaseGet(name)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::PureSeeder.Core.Configuration.Setting"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::PureSeeder.Core.Configuration.Setting"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::PureSeeder.Core.Configuration.Setting add)
        {
            base.BaseAdd(add);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::PureSeeder.Core.Configuration.Setting"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="add">The <see cref="global::PureSeeder.Core.Configuration.Setting"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::PureSeeder.Core.Configuration.Setting add)
        {
            base.BaseRemove(this.GetElementKey(add));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Setting"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::PureSeeder.Core.Configuration.Setting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Setting GetItemAt(int index)
        {
            return ((global::PureSeeder.Core.Configuration.Setting)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::PureSeeder.Core.Configuration.Setting"/> with the specified key.
        /// </summary>
        /// <param name="name">The key of the <see cref="global::PureSeeder.Core.Configuration.Setting"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::PureSeeder.Core.Configuration.Setting GetItemByKey(string name)
        {
            return ((global::PureSeeder.Core.Configuration.Setting)(base.BaseGet(((object)(name)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace PureSeeder.Core.Configuration
{
    
    
    /// <summary>
    /// The Setting Configuration Element.
    /// </summary>
    public partial class Setting : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Name Property
        /// <summary>
        /// The XML name of the <see cref="Name"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NamePropertyName = "name";
        
        /// <summary>
        /// Gets or sets the Name.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Name.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Setting.NamePropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Name
        {
            get
            {
                return ((string)(base[global::PureSeeder.Core.Configuration.Setting.NamePropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Setting.NamePropertyName] = value;
            }
        }
        #endregion
        
        #region Value Property
        /// <summary>
        /// The XML name of the <see cref="Value"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ValuePropertyName = "value";
        
        /// <summary>
        /// Gets or sets the Value.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Value.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::PureSeeder.Core.Configuration.Setting.ValuePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Value
        {
            get
            {
                return ((string)(base[global::PureSeeder.Core.Configuration.Setting.ValuePropertyName]));
            }
            set
            {
                base[global::PureSeeder.Core.Configuration.Setting.ValuePropertyName] = value;
            }
        }
        #endregion
    }
}
